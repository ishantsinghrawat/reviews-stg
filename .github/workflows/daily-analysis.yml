name: Daily review analysis (Google Play) â†’ JSON + alert

on:
  schedule:
    - cron: "0 11 * * *"     # 11:00 UTC daily (07:00 Toronto during EDT; 06:00 during EST)
  workflow_dispatch: {}

permissions:
  contents: write
  issues: write

jobs:
  run-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Hugging Face
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: ${{ runner.os }}-hf-${{ hashFiles('scripts/build_reviews_json.py') }}
          restore-keys: |
            ${{ runner.os }}-hf-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # BUILD: produce TWO datasets
      #   1) new_data_30d.json â†’ promoted to data.json (site/dashboard)
      #   2) new_data_1d.json  â†’ promoted to data_1d.json (alert compare baseline)
      # Do NOT overwrite data.json/data_1d.json here.
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

      - name: Build 30-day dataset (GP + iOS â†’ NLP, last 30 days)
        env:
          # Google Play
          GP_PACKAGE: com.mcdonalds.superapp
          GP_COUNTRY: ca
          GP_LANG: en
          ONLY_VERSION: ""           # optional (pins both stores if set)

          # App Store
          INCLUDE_APPSTORE: "true"
          IOS_APP_ID: "375695000"
          IOS_COUNTRY: "ca"
          IOS_LANG: "en"
          IOS_ONLY_VERSION: ""       # optional (pins only iOS if set)

          # Date window
          LAST_DAYS: "30"            # 30-day window for site/dashboard

          # NLP labels & caches
          ZS_LABELS: "Authentication/Login,Performance/Speed,UI/UX,Crashes/Bugs,Payments,Rewards/Offers,Feature Requests,Customer Support,Location/Geolocation,Refunds,Delivery,Monopoly"
          HF_HOME: ${{ runner.temp }}/hf_home
          TRANSFORMERS_CACHE: ${{ runner.temp }}/hf_home
          HF_HUB_DISABLE_SYMLINKS: "1"
          HF_HUB_DISABLE_TELEMETRY: 1
          TOKENIZERS_PARALLELISM: false
        run: |
          set -e
          python scripts/build_reviews_json.py \
            --out-new new_data_30d.json \
            --out-reviews reviews_30d.json   # optional artifact for inspection

      - name: Build 1-day dataset (GP + iOS â†’ NLP, last 1 day)
        env:
          # Google Play
          GP_PACKAGE: com.mcdonalds.superapp
          GP_COUNTRY: ca
          GP_LANG: en
          ONLY_VERSION: ""           # optional (pins both stores if set)

          # App Store
          INCLUDE_APPSTORE: "true"
          IOS_APP_ID: "375695000"
          IOS_COUNTRY: "ca"
          IOS_LANG: "en"
          IOS_ONLY_VERSION: ""       # optional (pins only iOS if set)

          # Date window
          LAST_DAYS: "1"             # 1-day window for day-over-day alerts

          # NLP labels & caches
          ZS_LABELS: "Authentication/Login,Performance/Speed,UI/UX,Crashes/Bugs,Payments,Rewards/Offers,Feature Requests,Customer Support,Location/Geolocation,Refunds,Delivery"
          HF_HOME: ${{ runner.temp }}/hf_home
          TRANSFORMERS_CACHE: ${{ runner.temp }}/hf_home
          HF_HUB_DISABLE_SYMLINKS: "1"
          HF_HUB_DISABLE_TELEMETRY: 1
          TOKENIZERS_PARALLELISM: false
        run: |
          set -e
          python scripts/build_reviews_json.py \
            --out-new new_data_1d.json \
            --out-reviews reviews_1d.json     # optional artifact for inspection

      # Ensure baselines exist for BOTH timelines
      - name: Ensure baseline data files exist
        run: |
          [[ -f data.json ]] || echo "[]" > data.json
          [[ -f data_1d.json ]] || echo "[]" > data_1d.json

      # Compare TODAY vs YESTERDAY using the 1-day files only
      - name: Compare negative sentiment (1-day â†’ day-over-day)
        id: compare
        run: |
          set -e
          python scripts/compare_negatives.py \
            --current data_1d.json \
            --new new_data_1d.json \
            --report delta_report.md \
            --threshold-abs 1 \
            --threshold-rel 0.1

      - name: Debug compare outputs
        run: |
          echo "compare.alert   = '${{ steps.compare.outputs.alert }}'"
          echo "compare.updated = '${{ steps.compare.outputs.updated }}'"

      - name: Show report (always)
        if: always()
        run: |
          if [ -f delta_report.md ]; then
            echo "---- delta_report.md ----"
            cat delta_report.md
          else
            echo "No report produced."
          fi

      # âœ… Publish reports directly to /reports (root)
      - name: Publish alert report to reports (HTML)
        run: |
          set -e
          mkdir -p reports
          DATE_UTC="$(date -u +%F)"

          # Keep markdown version
          cp delta_report.md "reports/${DATE_UTC}.md"

          # Render HTML version
          python3 scripts/render_report.py delta_report.md "reports/${DATE_UTC}.html"

          # Rebuild index.json (for alerts.html)
          python3 scripts/build_reports_index.py

          # Ensure GitHub Pages serves all files as-is
          echo > .nojekyll

          git add reports .nojekyll || true

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # Promote AFTER compare:
      #   - new_data_30d.json â†’ data.json     (site/dashboard stays 30-day)
      #   - new_data_1d.json  â†’ data_1d.json  (baseline for next day's alert)
      # Only replace if content differs.
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Promote JSONs (30d â†’ data.json, 1d â†’ data_1d.json)
        run: |
          set -e

          # 30-day promotion for the website/dashboard
          if [ -f new_data_30d.json ]; then
            if [ ! -f data.json ] || ! cmp -s new_data_30d.json data.json; then
              echo "Replacing data.json with new_data_30d.json"
              mv new_data_30d.json data.json
              git add data.json || true
            else
              echo "data.json unchanged; removing new_data_30d.json."
              rm -f new_data_30d.json
            fi
          else
            echo "new_data_30d.json not found; skipping 30-day promote."
          fi

          # 1-day promotion for next day's alert baseline
          if [ -f new_data_1d.json ]; then
            if [ ! -f data_1d.json ] || ! cmp -s new_data_1d.json data_1d.json; then
              echo "Replacing data_1d.json with new_data_1d.json"
              mv new_data_1d.json data_1d.json
              git add data_1d.json || true
            else
              echo "data_1d.json unchanged; removing new_data_1d.json."
              rm -f new_data_1d.json
            fi
          else
            echo "new_data_1d.json not found; skipping 1-day promote."
          fi

      - name: Commit site artifacts (data.json + data_1d.json + reports)
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git diff --cached --quiet && echo "No changes to commit." || git commit -m "chore: refresh data (30d/1d) & publish daily report"
          git push || true

      - name: Create daily alert issue (new per day)
        if: ${{ success() && fromJSON(steps.compare.outputs.alert) }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const today = new Date().toISOString().slice(0,10); // YYYY-MM-DD
            const title = `ðŸš¨ Negative sentiment increase â€” ${today}`;
            const report = fs.readFileSync('delta_report.md', 'utf8');
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;
            const body = `${report}\n\n---\n**Workflow run:** ${runUrl}\n**Run #** ${context.runNumber}`;

            // One issue per day; comment if already exists today
            const { data: issues } = await github.rest.issues.listForRepo({
              owner, repo, state: 'open', per_page: 100
            });
            const existing = issues.find(i => i.title === title);
            if (existing) {
              await github.rest.issues.createComment({
                owner, repo, issue_number: existing.number, body
              });
            } else {
              await github.rest.issues.create({
                owner, repo, title, body,
                labels: ['alert','sentiment','daily']
              });
            }
