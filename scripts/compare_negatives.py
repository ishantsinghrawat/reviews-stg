# -*- coding: utf-8 -*-
"""compare_negatives.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yMi6FLGezRLVsQ0O_UL435odj1vMLCuh
"""

# scripts/compare_negatives.py
import argparse, json, hashlib, os
from collections import defaultdict

SENTI_MAP = {
    "negative":"Negative","NEGATIVE":"Negative","LABEL_0":"Negative",
    "neutral":"Neutral","NEUTRAL":"Neutral","LABEL_1":"Neutral",
    "positive":"Positive","POSITIVE":"Positive","LABEL_2":"Positive"
}

def load_json(path):
    return json.load(open(path, "r", encoding="utf-8")) if os.path.exists(path) else []

def canon_sent(s):
    return SENTI_MAP.get(str(s), s or "")

def neg_counts(rows):
    by = defaultdict(int)
    for r in rows:
        cat = str(r.get("category","")).strip()
        if canon_sent(r.get("sentiment_std") or r.get("sentiment")) == "Negative":
            by[cat] += 1
    return dict(by)

def file_hash(path):
    if not os.path.exists(path): return ""
    import hashlib
    h = hashlib.sha256()
    with open(path, "rb") as f: h.update(f.read())
    return h.hexdigest()

def examples(rows, category, max_n=5):
    out = []
    n = 0
    for r in rows:
        if str(r.get("category","")).strip()==category and canon_sent(r.get("sentiment_std") or r.get("sentiment"))=="Negative":
            txt = (r.get("review") or "").strip().replace("\n"," ")
            if txt:
                out.append(f"- {txt[:200]}{'…' if len(txt)>200 else ''}")
                n += 1
                if n >= max_n: break
    return "\n".join(out) or "_no sample_"

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--current", required=True)
    ap.add_argument("--new", required=True)
    ap.add_argument("--report", required=True)
    ap.add_argument("--threshold-abs", type=int, default=3)
    ap.add_argument("--threshold-rel", type=float, default=0.2)
    args = ap.parse_args()

    cur = load_json(args.current)
    new = load_json(args.new)

    updated = (file_hash(args.current) != file_hash(args.new))
    cur_neg = neg_counts(cur)
    new_neg = neg_counts(new)

    cats = sorted(set(cur_neg) | set(new_neg))
    increases = []
    for c in cats:
        a = cur_neg.get(c,0); b = new_neg.get(c,0)
        delta = b - a
        rel = (delta / a) if a>0 else (1.0 if b>0 else 0.0)
        if delta>0 and (delta >= args.threshold_abs or rel >= args.threshold_rel):
            increases.append((c, a, b, delta, rel))

    alert = bool(increases)
    with open(args.report, "w", encoding="utf-8") as f:
        f.write(f"# Negative Sentiment Delta Report\n\n")
        f.write(f"- Updated file content: **{'yes' if updated else 'no'}**\n")
        f.write(f"- Alert conditions: abs ≥ {args.threshold_abs} or rel ≥ {int(args.threshold_rel*100)}%\n\n")
        if not increases:
            f.write("No categories exceeded thresholds.\n")
        else:
            f.write("| Category | Neg (old) | Neg (new) | Δ | Δ% |\n|---|---:|---:|---:|---:|\n")
            for (c, a, b, d, r) in increases:
                f.write(f"| {c or '_uncategorized_'} | {a} | {b} | +{d} | {round(r*100,1)}% |\n")
            f.write("\n")
            for (c, a, b, d, r) in increases:
                f.write(f"### {c or '_uncategorized_'} — new negative samples\n")
                f.write(examples(new, c, 5) + "\n\n")

    # emit outputs for the workflow
    print(f"updated={str(updated).lower()}")
    print(f"alert={str(alert).lower()}")
    out = os.getenv("GITHUB_OUTPUT")
    if out:
        with open(out, "a") as fh:
            fh.write(f"updated={str(updated).lower()}\n")
            fh.write(f"alert={str(alert).lower()}\n")

if __name__ == "__main__":
    main()